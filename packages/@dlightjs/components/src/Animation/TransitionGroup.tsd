import {View, loopNodes, DLNode, DLNodeType, toEls} from "@dlightjs/dlight"



export class TransitionGroup extends View {
    @Prop duration = 0.5
    durationMili = this.duration * 1000
    @State prevElInfos
    getElInfos = () => {
        return toEls(this._$children).reduce((acc, el) => {
            acc.set(el, el.getBoundingClientRect())
            return acc
        }, new Map())
    }

    didMount() {
        this.prevElInfos = this.getElInfos()
        setTimeout(() => {
            this.prevElInfos = this.getElInfos()
        }, 0)
    }

    Body() { 
        {{this._$children}}
            .deepLoopEl(true)
            ._transition(`all ${this.duration}s`)
            .onUpdateNodes((prevNodes, nodes)=> {
                const currElInfos = this.getElInfos()
                for (let [el, rect] of this.prevElInfos.entries()) {
                    if (currElInfos.has(el)) {
                        // ---- 原来有，就移动
                        const currRect = currElInfos.get(el)
                        const moveX = rect.x - currRect.x
                        const moveY = rect.y - currRect.y
                        if (moveX === 0 && moveY === 0) continue
                        el.style.transform = `translate(${moveX}px, ${moveY}px)`               
                        el.style.transitionDuration = "0s"
                        setTimeout(() => {
                            el.style.transform = ''
                            el.style.transitionDuration = `${this.duration}s`
                        }, 0)
                    } else {
                        // ---- 原来没有，就appear
                        el.style.opacity = "0"               
                        setTimeout(() => {
                            el.style.opacity = "1"
                        }, 0)
                    }
                    
                }
                this.prevElInfos = currElInfos
            })        
            .didMount((node) => {
                for (let el of node._$el) {
                    console.log(el)
                    el.style.opacity = "0"               
                    setTimeout(() => {
                        el.style.opacity = ""
                    }, 0)
                }
            })
    }
}

