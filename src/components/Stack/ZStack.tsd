import {View, HtmlNode, DLNode, loopNodes, DLNodeType} from "@/core"
import {Nodes} from "../Node";
import {HAlignment, VAlignment} from "./types"

export class ZStack extends View {
    @Prop hAlignment: HAlignment  = "center"
    @Prop vAlignment: VAlignment = "center"
    @Prop width = "max-content"
    @Prop height = "max-content"

    loopHTMLChildren = (nodes: DLNode[]) => {
        for (let node of nodes) {
            
        }
    }

    childrenLayout = (alignment: string) => {
        loopNodes(this._$children, (node: DLNode) => {
            if (node._$nodeType !== DLNodeType.HTML) return true
            node._$addProp("_position", "relative")
            node._$addProp("_gridArea", "1 / 1/ 1 / 1")
            return false
        })
    }

    // ---- 第一次进来要用Afterset来调用，因为子node还没有配置好
    Afterset() {
        this.childrenLayout(this.alignment)
    }
    firstIn = true
    manualUpdateChildren = function() {
        if (this.firstIn) return
        this.firstIn = false
        this.childrenLayout(this.alignment)
    }.call(this)


    Body() {
        div {
            Nodes(this._$children)
        }
            ._height(this.height)
            ._width(this.width)
            ._columnGap(`${this.spacing}px`)
            ._display("grid")
            ._alignItems(({
                "top": "flex-start",
                "center": "center",
                "bottom": "flex-end"
            })[this.vAlignment])
            ._justifyItems(({
                "leading": "left",
                "center": "center",
                "tailing": "right"
            })[this.hAlignment])
    }
}