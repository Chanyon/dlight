import {View} from "./core";
import {Transition} from "./components/Animation/Transition.tsd"
// import {HStack} from "./components/Stack/HStack.tsd"
// import {Spacer} from "./components/Stack/Spacer.tsd"
// import {VStack} from "./components/Stack/VStack.tsd"
// import {ZStack} from "./components/Stack/ZStack.tsd"
// import {TextField} from "./components/Input"
// import {Node, Nodes} from "./components/Node"


function shuffle(array) {
  return array.sort(() => Math.random() - 0.5);
}


export class TestTest extends View {
    @State list = [
    { id: 0, value: "bread" },
    { id: 1, value: "milk" },
    { id: 2, value: "honey" },
    { id: 3, value: "chips" },
    { id: 4, value: "cookie" }
  ]
  shuffle = () => {
    let randomList = this.list
    while (JSON.stringify(this.list) === JSON.stringify(randomList)) {
        randomList = shuffle(JSON.parse(JSON.stringify(this.list)))
    }
    this.list = randomList
    console.log(randomList.map(l=>l.id))
  }
  timer = setInterval(() => {
    
    this.shuffle()
  }, 1000);
    add = () => {
        this.list = [...this.list, {id: this.list.length, value: "hhh"}]
    }
    subs = () => {
        this.list = this.list.slice(0, -1)
    }

    toggle =true
    parentNode
    el1
    el2

    @State width = 50
    Body() {
        button("shuffle")
            .onclick(() => {
                this.shuffle()
            })
        button("+")
            .onclick(() => {
                this.width += 50
            })
        button("-")
            .onclick(() => {
                this.width -= 50
            })
        button("++")
            .onclick(this.add)
         button("--")
            .onclick(this.subs)
        Transition {
            div("hh")
                ._width(`${this.width}px`)
                ._backgroundColor("blue")
            For(let {id, value} of this.list)[id] {
                div (`${id} ${value}`)
                    ._backgroundColor("red")
                    ._margin("10px")
            }
        }
    }
}

class Case extends View {
    @Prop _$content
    Body() {}
}
class Switch extends View {
    @Prop _$content
    @State endIdx
    @State targetNodes = []

    getChild = () => {
        let flag = true
        for (let child of this._$children) {
            if (child._$tag !== "Case") continue
            if (this._$content === child._$content) {
                flag = false
                this.targetNodes = child._$children
                break
            }
        }
        if (flag) this.targetNodes = []
    }
 
    // ---- 第一次进来要用Afterset来调用，因为子node还没有配置好
    Preset() {
        this.getChild()
        this.firstIn = false
    }
    firstIn = true
    manualUpdateChildren = function() {
        if (this.firstIn) return
        this.getChild()
        let _ = this._$content
    }.call(this)
    
    Body() {
        Node(this.targetNodes)
        
    }
}

