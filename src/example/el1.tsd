import {View, Derived, DotProp, Effect, Prop, PropDerived, State, Environment} from "@/core";

class SubEl3 extends View {
    @Prop a: number

    Body() {
        div(this.a)
    }
}

class SubEl2 extends View {
    @Prop a: number
    @Environment id: number

    Body() {
        div(this.a)
        div(this.id)
        SubEl3({a: this.a+1})
    }
}

class SubEl1 extends View {
    @Prop a: number
    @Environment what: number

    Body() {
        div(this.what)
        button("+")
            .onclick(() => {
                this.what ++
            })

        button("-")
            .onclick(() => {
                this.what --
            })
        SubEl2({a: this.a+1})

    }
}

const a = 1

export class TestElement extends View {
    @State count = 2
    @State hh = 3
    @State flag = true

    @State apple = [0,1,2,3]
    @Derived c2 = this.count * 2
    @Derived c3 = this.c2 * 2
    c = 4

    Body() {
        button("+")
            .onclick(() => {
                this.hh ++
            })

        button("-")
            .onclick(() => {
                this.hh --
            })

        button("flag")
            .onclick(() => {
                this.flag = !this.flag
            })
        If (this.flag) {
            `${this.flag}`
        }
        For(let i of this.apple) {
            `${i}`
        }
        "no"
        "------"
        Environment({what: 1, id: "caosiwo"}) {
            If (this.flag) {
                For (let i of [...Array(100).keys()]) {
                    SubEl1({ a: this.hh+1})
                }
            }            
        }
    }
}
