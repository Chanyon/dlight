import {View} from "./core/DLBase";
// @ts-ignore
import {Derived, DotProp, Effect, Prop, PropDerived, State} from "./core/decorator";

// @ts-ignore
class MyInput extends View {
    @DotProp ok = "fuck you"

    @PropDerived
    @State
    okState = this.ok

    @PropDerived plain = this.ok
    plainno = this.ok

    @Prop a

    didMount() {
        console.log("didMount")
        console.log(this.plain, this.plainno)
    }
    // @ts-ignore
    Body = ```
        div{
            button("inner")
                .onclick(() => {
                    this.ok --
                })
        }
        div(this.ok)
        button(this.a)
            .onclick(() => {
                this.ok ++
            })
    ```


    willMount() {
        console.log("willMount")
    }

    willUnmount() {
        console.log("willUnmount")
    }
    didUnmount() {
        console.log("didUnmount")
    }
}

const a = 1

export class TestElement extends View {
    @State count = 2
    @State hh = 3
    @State flag = true

    @State apple = [0,1,2,3]
    @Derived c2 = this.count * 2
    @Derived c3 = this.c2 * 2
    c = 4

    // @ts-ignore
    Body = ```
        button("outer")
            .onclick(() => {
                this.count ++
            })
        div(this.c2)
        div(this.c3)
        div(this.count)
        MyInput({ a: "fuck"})
            .ok(this.count)
                                
    ```
}
