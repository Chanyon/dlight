import {View} from "@dlightjs/dlight";

let idCounter = 1;

const adjectives = ["pretty", "large", "big", "small", "tall", "short", "long", "handsome", "plain", "quaint", "clean", "elegant", "easy", "angry", "crazy", "helpful", "mushy", "odd", "unsightly", "adorable", "important", "inexpensive", "cheap", "expensive", "fancy"],
    colours = ["red", "yellow", "blue", "green", "pink", "brown", "purple", "brown", "white", "black", "orange"],
    nouns = ["table", "chair", "house", "bbq", "desk", "car", "pony", "cookie", "sandwich", "burger", "pizza", "mouse", "keyboard"];

function _random (max) { return Math.round(Math.random() * 1000) % max; };

function buildData(count) {
    let data = new Array(count);
    for (let i = 0; i < count; i++) {
        data[i] = {
            id: idCounter++,
            label: `${adjectives[_random(adjectives.length)]} ${colours[_random(colours.length)]} ${nouns[_random(nouns.length)]}`
        }
    }
    return data;
}

class Button extends View {
    @Prop id
    @Prop onclick
    @Prop _$content
    Body() {
        div() {
            button(this._$content)
                .onclick(this.onclick)
                .id(this.id)
                .className("btn btn-primary btn-block")
        }           
            .className("col-sm-6 smallpad")
    }
}


class Row extends View {
    @Prop id: string
    @Prop label: string
    @Prop className: string
    @Prop selectRow: any
    @Prop deleteRow: any
    Body() {
        tr() {
            td(this.id)
                .className("col-md-1")
            td() {
                a(this.label)
                    .className("lbl")
            }
                .className("col-md-4")
                .onclick(() => this.selectRow(this.id))
            td() {
                a() {
                    span()
                        .className("remove glyphicon glyphicon-remove")
                        .ariaHidden(true)
                }
                    .className("remove")
            }
                .className("col-md-1")
                .onclick(() => this.deleteRow(this.id))
            td()
                .className("col-md-6")
        }
        .data_id(this.id)
            .className(this.className)
    }
}

export class Benchmark extends View {
    @State rows = []
    @State selectIdx = -1
    addRows = () => {
        this.rows = buildData(1000)
    }
    swapRows = () => {
        if (this.rows.length > 999) {
            this.rows = [this.rows[0], this.rows[998], ...this.rows.slice(2, 998), this.rows[1], this.rows[999]]
        }
    }
    clearRows = () => {
        this.rows = []
    }
    selectRow = idx => {
        this.selectIdx = idx
    }
    deleteRow = id => {
        const idx = this.rows.findIndex(row => row.id === id);
        this.rows = [...this.rows.slice(0, idx), ...this.rows.slice(idx + 1)]
    }
    addBig = () => {
        this.rows = buildData(10000)
    }
    append = () => {
        this.rows = [...this.rows, ...buildData(1000)]
    }
    update = () => {
        for (let i=0;i<this.rows.length;i+=10) {
            this.rows[i].label += "!!! "
        }
        this.rows = [...this.rows]
    }

    @State count = -1

    Body() {
        div() {
            h1("dlight")
        }
            .className("col-sm-6")
        div() {
            div() {
                Button("Create 1,000 rows")
                    .onclick(this.addRows)
                    .id("run")
                Button("Create 10,000 rows")
                    .onclick(this.addBig)
                    .id("runlots")
                Button("Append 1,000 rows")
                    .onclick(this.append)
                    .id("add")
                Button("Update every 10th rows")
                    .onclick(this.update)
                    .id("update")
                Button("Clear")
                    .onclick(this.clearRows)
                    .id("clear")
                    .className("col-sm-6 smallpad")
                Button("Swap Rows")
                    .onclick(this.swapRows)
                    .id("swaprows")
            }            
                .className("col-sm-6")
        }            
            .className("row")

        div() {
            table() {
                tbody() {
                    For(let {id,label} of this.rows)[id] {
                        // Row({id, label})
                        //     .deleteRow(this.deleteRow)
                        //     .selectRow(this.selectRow)
                        //     .className(this.selectIdx === id ? "danger" : "")
                        tr() {
                            td(id)
                                .className("col-md-1")
                            td() {
                                a(label)
                                    .className("lbl")
                            }
                                .className("col-md-4")
                                .onclick(() => this.selectRow(id))
                            td() {
                                a() {
                                    span()
                                        .className("remove glyphicon glyphicon-remove")
                                        .ariaHidden(true)
                                }
                                    .className("remove")
                            }
                                .className("col-md-1")
                                .onclick(() => this.deleteRow(id))
                            td()
                                .className("col-md-6")
                        }
                            .data_id(id)
                            .className(this.selectIdx === id ? "danger" : "")
                    }
                }
                    .id("tbody")
            }
                .className("table table-hover table-striped test-data")
            span()
                .className("preloadicon glyphicon glyphicon-remove") 
                .ariaHidden("true")
        }
    }
}
