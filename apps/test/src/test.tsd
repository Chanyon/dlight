import {View} from "@dlightjs/dlight";
import {_, button, div, Prop, PropState, required, State} from "@dlightjs/useless";
import {Await, StateObject, Watch} from "@dlightjs/decorators";


function timeout(ms: number) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

async function go(count: number): any {
  await timeout(1000);
  return {aa: `Okkkkkkk${count}`}
}

class HHH extends View {
  Body() {
    div("fuck")
  }
}
export class TestTest extends View {
 @State    apples = [{a: 1}, {a: 2}, {a: 3}]
 hh=2

    @View
    Haha({apple}) {
      
    }

    Body() {
        for (let [idx, apple] of this.apples.entries()) {
           this.Haha()
               .apple(apple)
        }
        button("+")
          .onclick(() => {
            this.apples.push({a: this.apples.length+1})
            this.apples = [...this.apples]
          })
        button("-")
          .onclick(() => {
            delete this.apples[this.apples.length -1]
            this.apples.length --
            console.log(this.apples)
            this.apples = [...this.apples]
          })
        button("tt")
          .onclick(() => {
            for (let apple of this.apples) {
              apple.a ++
            }
            this.apples = [...this.apples]
          })

    }
}

const pure = a => JSON.parse(JSON.stringify(a))