import {View} from "@dlightjs/dlight";
import {_, button, div, object, Prop, PropState, required, State} from "@dlightjs/useless";
import {Await, StateObject, Watch} from "@dlightjs/decorators";


function timeout(ms: number) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

async function go(count: number): any {
  await timeout(1000);
  return {aa: `Okkkkkkk${count}`}
}


const FuckMe = (defaultValue: number) => (_: any, setValue: any): any => {
    let i =  defaultValue ?? 0
    setInterval(() => {
        setValue(++i)
    }, 1000)
    return {aa: defaultValue}
}

class T2 extends View {
    @Prop
    apples = required

    Body() {
        button("add")
            .onclick(() => {
                this.apples[`ff${Object.keys(this.apples).length}`] = ({a: Object.keys(this.apples).length + 1})
            })
    }
}

class T3 extends View {
    @Prop
    apple = required
    @Prop deleteT
    Body() {
        div(this.apple.a)
        button("+")
            .onclick(() => {
                this.apple.a += 1
            })
        button("-")
            .onclick(this.deleteT)
    }
}
export class TestTest extends View {
    @State @StateObject @Watch((value) => {
        console.log(value, "changed")
    })
    apples = {hh: {a: 1}, jj: {a: 2}, tt: {a: 3}}

    @State @StateObject
    b = {a: {b: {c:1}}}

    Body() {
        div(this.b.a.b.c)
        button("fuck")
            .onclick(() => {
                this.b.a.b.c ++
            })
        T2()
            .apples(this.apples)
        for (let [idx, apple] of Object.entries(this.apples)) {
            div(apple.a)
            button("+")
                .onclick(() => {
                    apple.a += 1
                })
            button("-")
                .onclick(() => {
                    console.log(idx, this.apples)
                    delete this.apples[idx]
                })
        }

    }
}
