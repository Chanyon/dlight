import {View} from "@dlightjs/dlight";
import {_, button, div, State} from "@dlightjs/useless";


function timeout(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}
const Await = undefined as any

async function go(count: number) {
  await timeout(1000);
  return {
    loading: false,
    a: `Okkkkkkk${count}`,
  }
}

type StateObjectProxy<T extends object> = (memberSet: (newState: T)=>any) => ProxyHandler<T>
const _$stateObjectProxy: StateObjectProxy<any> = memberSet => ({
    get(target, key) {
        if (typeof target[key] === 'object' && target[key] !== null) {
            return new Proxy(target[key], _$stateObjectProxy(memberSet))
        } else {
            return target[key];
        }
    },
    set(target, property, value) {
        target[property] = value;
        memberSet(target)
        return false
    }
})
export class TestTest extends View {
    @State count = 0
    @State AA = new Proxy({a: 100},_$stateObjectProxy(d=>this.AA=d))

    Body() {
        div(this.AA.a)
        button('+').onclick(() => {
          this.count++;
          this.AA.a ++
        });
        button('-').onclick(() => {
          this.count--;
        });
    }
}
