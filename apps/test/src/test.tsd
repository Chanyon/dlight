import {View, required, render} from "@dlightjs/dlight"
import {geneParserNode, JSDConfig} from "@dlightjs/transpiler"
`
class New extends View {
  _$deps = {
    count: /* @__PURE__ */ new Map()
  };
  _$tag = "New";
  _$$count = 1;
  get count() {
    return this._$$count;
  }
  set count(value) {
    if (this._$$count === value)
      return;
    this._$$count = value;
    this._$runDeps("count");
  }
  Body = () => {
    const _$node0 = new _$.HtmlNode("div");
    _$node0._$addProp("innerHTML", () => this.count, this, ["count"]);
    const _$node1 = new _$.HtmlNode("button");
    _$node1._$addProp("innerHTML", "+");
    _$node1._$addProp("onclick", () => {
      this.count++;
    });
    const _$node2 = new _$.HtmlNode("button");
    _$node2._$addProp("innerHTML", "-");
    _$node2._$addProp("onclick", () => {
      this.count--;
    });
    return [_$node0, _$node1, _$node2];
  };
}
render("meme", New)
`
class TT extends View {


    Afterset() {
        console.log('jj')
        console.log(this._$el, 'tt')
        this._$el = this._$el[0]
    }

    Body() {
        div("hhh")
    }


}


export class TestTest extends View {
    @State text = ""
    @State el
    // didMount(_els: HTMLElement[], _node: CustomNode) {
    //     console.log(this.el)
    // }

    Body() {
        TT()
            .element((els) => {
                console.log(els)
                this.el = els
            })

    }
}